// vite.config.ts
import { resolve } from "node:path";
import react from "file:///home/jfprado/works/imagineCX/imaginecx-library/node_modules/@vitejs/plugin-react/dist/index.mjs";
import { defineConfig } from "file:///home/jfprado/works/imagineCX/imaginecx-library/node_modules/vite/dist/node/index.js";
import dts from "file:///home/jfprado/works/imagineCX/imaginecx-library/node_modules/vite-plugin-dts/dist/index.mjs";
import EsLint from "file:///home/jfprado/works/imagineCX/imaginecx-library/node_modules/vite-plugin-linter/dist/index.js";
import tsConfigPaths from "file:///home/jfprado/works/imagineCX/imaginecx-library/node_modules/vite-tsconfig-paths/dist/index.mjs";

// package.json
var peerDependencies = {
  "date-fns": ">=2.29.3",
  downshift: ">=8.2.3",
  react: "16.8.0 || >=17.x",
  "react-dom": "16.8.0 || >=17.x"
};

// vite.config.ts
var { EsLinter, linterPlugin } = EsLint;
var vite_config_default = defineConfig((configEnv) => ({
  plugins: [
    react(),
    tsConfigPaths(),
    linterPlugin({
      include: ["./src}/**/*.{ts,tsx}"],
      linters: [new EsLinter({ configEnv })]
    }),
    dts({
      insertTypesEntry: true,
      include: ["src/components/"]
    })
  ],
  build: {
    lib: {
      entry: resolve("src", "components/index.ts"),
      name: "imaginecx-library",
      formats: ["es", "umd"],
      fileName: (format) => `imaginecx-library.${format}.js`
    },
    rollupOptions: {
      external: [...Object.keys(peerDependencies)]
    }
  }
}));
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiLCAicGFja2FnZS5qc29uIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiL2hvbWUvamZwcmFkby93b3Jrcy9pbWFnaW5lQ1gvaW1hZ2luZWN4LWxpYnJhcnlcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIi9ob21lL2pmcHJhZG8vd29ya3MvaW1hZ2luZUNYL2ltYWdpbmVjeC1saWJyYXJ5L3ZpdGUuY29uZmlnLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9ob21lL2pmcHJhZG8vd29ya3MvaW1hZ2luZUNYL2ltYWdpbmVjeC1saWJyYXJ5L3ZpdGUuY29uZmlnLnRzXCI7aW1wb3J0IHsgcmVzb2x2ZSB9IGZyb20gJ25vZGU6cGF0aCc7XG5cbmltcG9ydCByZWFjdCBmcm9tICdAdml0ZWpzL3BsdWdpbi1yZWFjdCc7XG5pbXBvcnQgeyBkZWZpbmVDb25maWcgfSBmcm9tICd2aXRlJztcbmltcG9ydCBkdHMgZnJvbSAndml0ZS1wbHVnaW4tZHRzJztcbmltcG9ydCBFc0xpbnQgZnJvbSAndml0ZS1wbHVnaW4tbGludGVyJztcbmltcG9ydCB0c0NvbmZpZ1BhdGhzIGZyb20gJ3ZpdGUtdHNjb25maWctcGF0aHMnO1xuY29uc3QgeyBFc0xpbnRlciwgbGludGVyUGx1Z2luIH0gPSBFc0xpbnQ7XG5pbXBvcnQgKiBhcyBwYWNrYWdlSnNvbiBmcm9tICcuL3BhY2thZ2UuanNvbic7XG4vLyBodHRwczovL3ZpdGVqcy5kZXYvY29uZmlnL1xuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29uZmlnKChjb25maWdFbnYpID0+ICh7XG4gIHBsdWdpbnM6IFtcbiAgICByZWFjdCgpLFxuICAgIHRzQ29uZmlnUGF0aHMoKSxcbiAgICBsaW50ZXJQbHVnaW4oe1xuICAgICAgaW5jbHVkZTogWycuL3NyY30vKiovKi57dHMsdHN4fSddLFxuICAgICAgbGludGVyczogW25ldyBFc0xpbnRlcih7IGNvbmZpZ0VudiB9KV0sXG4gICAgfSksXG4gICAgZHRzKHtcbiAgICAgIGluc2VydFR5cGVzRW50cnk6IHRydWUsXG4gICAgICBpbmNsdWRlOiBbJ3NyYy9jb21wb25lbnRzLyddLFxuICAgIH0pLFxuICBdLFxuICBidWlsZDoge1xuICAgIGxpYjoge1xuICAgICAgZW50cnk6IHJlc29sdmUoJ3NyYycsICdjb21wb25lbnRzL2luZGV4LnRzJyksXG4gICAgICBuYW1lOiAnaW1hZ2luZWN4LWxpYnJhcnknLFxuICAgICAgZm9ybWF0czogWydlcycsICd1bWQnXSxcbiAgICAgIGZpbGVOYW1lOiAoZm9ybWF0KSA9PiBgaW1hZ2luZWN4LWxpYnJhcnkuJHtmb3JtYXR9LmpzYCxcbiAgICB9LFxuICAgIHJvbGx1cE9wdGlvbnM6IHtcbiAgICAgIGV4dGVybmFsOiBbLi4uT2JqZWN0LmtleXMocGFja2FnZUpzb24ucGVlckRlcGVuZGVuY2llcyldLFxuICAgIH0sXG4gIH0sXG59KSk7XG4iLCAie1xuICBcIm5hbWVcIjogXCJAaW1hZ2luZS1jeC9pbWFnaW5lY3gtbGlicmFyeVwiLFxuICBcInByaXZhdGVcIjogZmFsc2UsXG4gIFwidmVyc2lvblwiOiBcIjAuMy4yXCIsXG4gIFwidHlwZVwiOiBcIm1vZHVsZVwiLFxuICBcInNjcmlwdHNcIjoge1xuICAgIFwiZGV2XCI6IFwidml0ZVwiLFxuICAgIFwiYnVpbGRcIjogXCJ0c2MgJiYgdml0ZSBidWlsZCAmJiBucG0gcnVuIGJ1aWxkOnN0eWxlXCIsXG4gICAgXCJidWlsZDpzdHlsZVwiOiBcInBvc3Rjc3Mgc3JjL2NvbXBvbmVudHMvc3R5bGUuY3NzIC1vIC4vZGlzdC9zdHlsZS5jc3NcIixcbiAgICBcInByZXZpZXdcIjogXCJ2aXRlIHByZXZpZXdcIixcbiAgICBcImxpbnRcIjogXCJlc2xpbnQgJ3NyYy8qKi8qLntqcyxqc3gsdHMsdHN4fSdcIixcbiAgICBcImxpbnQ6Zml4XCI6IFwiZXNsaW50IC0tZml4ICdzcmMvKiovKi57anN4LHRzLHRzeH0nXCIsXG4gICAgXCJmb3JtYXRcIjogXCJwcmV0dGllciAtLXdyaXRlIHNyYy8vKiovKi57dHMsdHN4LGNzc30gLS1jb25maWcgLi8ucHJldHRpZXJyY1wiLFxuICAgIFwicHJlcGFyZVwiOiBcImh1c2t5IGluc3RhbGxcIlxuICB9LFxuICBcImh1c2t5XCI6IHtcbiAgICBcImhvb2tzXCI6IHtcbiAgICAgIFwicHJlLWNvbW1pdFwiOiBcImxpbnQtc3RhZ2VkXCJcbiAgICB9XG4gIH0sXG4gIFwibGludC1zdGFnZWRcIjoge1xuICAgIFwic3JjLyoqLyoue2pzLGpzeCx0cyx0c3h9XCI6IFtcbiAgICAgIFwiZXNsaW50XCIsXG4gICAgICBcIm5wbSBydW4gZm9ybWF0XCJcbiAgICBdXG4gIH0sXG4gIFwiZmlsZXNcIjogW1xuICAgIFwiZGlzdFwiXG4gIF0sXG4gIFwiZXhwb3J0c1wiOiB7XG4gICAgXCIuXCI6IHtcbiAgICAgIFwiaW1wb3J0XCI6IHtcbiAgICAgICAgXCJ0eXBlc1wiOiBcIi4vZGlzdC9pbmRleC5kLnRzXCIsXG4gICAgICAgIFwiZGVmYXVsdFwiOiBcIi4vZGlzdC9pbWFnaW5lY3gtbGlicmFyeS5lcy5qc1wiXG4gICAgICB9LFxuICAgICAgXCJyZXF1aXJlXCI6IHtcbiAgICAgICAgXCJ0eXBlc1wiOiBcIi4vZGlzdC9pbmRleC5kLnRzXCIsXG4gICAgICAgIFwiZGVmYXVsdFwiOiBcIi4vZGlzdC9pbWFnaW5lY3gtbGlicmFyeS51bWQuanNcIlxuICAgICAgfVxuICAgIH0sXG4gICAgXCIuL3N0eWxlLmNzc1wiOiB7XG4gICAgICBcImltcG9ydFwiOiBcIi4vZGlzdC9zdHlsZS5jc3NcIixcbiAgICAgIFwicmVxdWlyZVwiOiBcIi4vZGlzdC9zdHlsZS5jc3NcIlxuICAgIH0sXG4gICAgXCIuL2Rpc3QvKlwiOiBcIi4vZGlzdC8qLmQudHNcIlxuICB9LFxuICBcIm1haW5cIjogXCJkaXN0L2ltYWdpbmVjeC1saWJyYXJ5LnVtZC5qc1wiLFxuICBcIm1vZHVsZVwiOiBcImRpc3QvaW1hZ2luZWN4LWxpYnJhcnkuZXMuanNcIixcbiAgXCJ0eXBlc1wiOiBcImRpc3QvaW5kZXguZC50c1wiLFxuICBcImRldkRlcGVuZGVuY2llc1wiOiB7XG4gICAgXCJAdHlwZXMvbm9kZVwiOiBcIl4xOC4xNS4xMVwiLFxuICAgIFwiQHR5cGVzL3JlYWN0XCI6IFwiXjE4LjAuMjhcIixcbiAgICBcIkB0eXBlcy9yZWFjdC1kb21cIjogXCJeMTguMC4xMVwiLFxuICAgIFwiQHR5cGVzY3JpcHQtZXNsaW50L2VzbGludC1wbHVnaW5cIjogXCJeNS41OC4wXCIsXG4gICAgXCJAdHlwZXNjcmlwdC1lc2xpbnQvcGFyc2VyXCI6IFwiXjUuNTguMFwiLFxuICAgIFwiQHZpdGVqcy9wbHVnaW4tcmVhY3RcIjogXCJeMy4xLjBcIixcbiAgICBcImF1dG9wcmVmaXhlclwiOiBcIl4xMC40LjE0XCIsXG4gICAgXCJkYXRlLWZuc1wiOiBcIl4yLjI5LjNcIixcbiAgICBcImRvd25zaGlmdFwiOiBcIl44LjIuM1wiLFxuICAgIFwiZXNsaW50XCI6IFwiXjguMzguMFwiLFxuICAgIFwiZXNsaW50LWNvbmZpZy1wcmV0dGllclwiOiBcIl44LjguMFwiLFxuICAgIFwiZXNsaW50LXBsdWdpbi1pbXBvcnRcIjogXCJeMi4yNy41XCIsXG4gICAgXCJlc2xpbnQtcGx1Z2luLWpzeC1hMTF5XCI6IFwiXjYuNy4xXCIsXG4gICAgXCJlc2xpbnQtcGx1Z2luLXByZXR0aWVyXCI6IFwiXjQuMi4xXCIsXG4gICAgXCJlc2xpbnQtcGx1Z2luLXJlYWN0XCI6IFwiXjcuMzIuMlwiLFxuICAgIFwiZXNsaW50LXBsdWdpbi1yZWFjdC1ob29rc1wiOiBcIl40LjYuMFwiLFxuICAgIFwiZXNsaW50LXBsdWdpbi1zaW1wbGUtaW1wb3J0LXNvcnRcIjogXCJeMTAuMC4wXCIsXG4gICAgXCJodXNreVwiOiBcIl44LjAuM1wiLFxuICAgIFwibGludC1zdGFnZWRcIjogXCJeMTMuMi4xXCIsXG4gICAgXCJwb3N0Y3NzXCI6IFwiXjguNC4yMVwiLFxuICAgIFwicG9zdGNzcy1jbGlcIjogXCJeMTAuMS4wXCIsXG4gICAgXCJwcmV0dGllclwiOiBcIl4yLjguN1wiLFxuICAgIFwicmVhY3RcIjogXCJeMTguMi4wXCIsXG4gICAgXCJyZWFjdC1kb21cIjogXCJeMTguMi4wXCIsXG4gICAgXCJyZWFjdC1ob29rc1wiOiBcIl4xLjAuMVwiLFxuICAgIFwidGFpbHdpbmRjc3NcIjogXCJeMy4zLjFcIixcbiAgICBcInR5cGVzY3JpcHRcIjogXCJeNC45LjVcIixcbiAgICBcInZpdGVcIjogXCJeNC4yLjBcIixcbiAgICBcInZpdGUtcGx1Z2luLWR0c1wiOiBcIl4yLjIuMFwiLFxuICAgIFwidml0ZS1wbHVnaW4tbGludGVyXCI6IFwiXjIuMC4yXCIsXG4gICAgXCJ2aXRlLXRzY29uZmlnLXBhdGhzXCI6IFwiXjQuMC45XCJcbiAgfSxcbiAgXCJwZWVyRGVwZW5kZW5jaWVzXCI6IHtcbiAgICBcImRhdGUtZm5zXCI6IFwiPj0yLjI5LjNcIixcbiAgICBcImRvd25zaGlmdFwiOiBcIj49OC4yLjNcIixcbiAgICBcInJlYWN0XCI6IFwiMTYuOC4wIHx8ID49MTcueFwiLFxuICAgIFwicmVhY3QtZG9tXCI6IFwiMTYuOC4wIHx8ID49MTcueFwiXG4gIH0sXG4gIFwicmVwb3NpdG9yeVwiOiB7XG4gICAgXCJ0eXBlXCI6IFwiZ2l0XCIsXG4gICAgXCJ1cmxcIjogXCJodHRwczovL2dpdGh1Yi5jb20vSW1hZ2luZS1DWC9pbWFnaW5lY3gtbGlicmFyeVwiXG4gIH0sXG4gIFwia2V5d29yZHNcIjogW10sXG4gIFwiYXV0aG9yXCI6IFwiSW1hZ2luZSBDWFwiLFxuICBcImJ1Z3NcIjoge1xuICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL0ltYWdpbmUtQ1gvaW1hZ2luZWN4LWxpYnJhcnkvaXNzdWVzXCJcbiAgfSxcbiAgXCJob21lcGFnZVwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9JbWFnaW5lLUNYL2ltYWdpbmVjeC1saWJyYXJ5I3JlYWRtZVwiLFxuICBcImxpY2Vuc2VcIjogXCJNSVRcIixcbiAgXCJkZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiQGVtb3Rpb24vcmVhY3RcIjogXCJeMTEuMTEuMVwiLFxuICAgIFwiY2xzeFwiOiBcIl4xLjIuMVwiLFxuICAgIFwicmVhY3QtYXdlc29tZS1yZXZlYWxcIjogXCJeNC4yLjVcIixcbiAgICBcInJlYWN0LWljb25zXCI6IFwiXjQuOC4wXCIsXG4gICAgXCJyZWFjdC1yb3V0ZXItZG9tXCI6IFwiXjYuMTEuMVwiXG4gIH1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBK1QsU0FBUyxlQUFlO0FBRXZWLE9BQU8sV0FBVztBQUNsQixTQUFTLG9CQUFvQjtBQUM3QixPQUFPLFNBQVM7QUFDaEIsT0FBTyxZQUFZO0FBQ25CLE9BQU8sbUJBQW1COzs7QUM0RXhCLHVCQUFvQjtBQUFBLEVBQ2xCLFlBQVk7QUFBQSxFQUNaLFdBQWE7QUFBQSxFQUNiLE9BQVM7QUFBQSxFQUNULGFBQWE7QUFDZjs7O0FEaEZGLElBQU0sRUFBRSxVQUFVLGFBQWEsSUFBSTtBQUduQyxJQUFPLHNCQUFRLGFBQWEsQ0FBQyxlQUFlO0FBQUEsRUFDMUMsU0FBUztBQUFBLElBQ1AsTUFBTTtBQUFBLElBQ04sY0FBYztBQUFBLElBQ2QsYUFBYTtBQUFBLE1BQ1gsU0FBUyxDQUFDLHNCQUFzQjtBQUFBLE1BQ2hDLFNBQVMsQ0FBQyxJQUFJLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUFBLElBQ3ZDLENBQUM7QUFBQSxJQUNELElBQUk7QUFBQSxNQUNGLGtCQUFrQjtBQUFBLE1BQ2xCLFNBQVMsQ0FBQyxpQkFBaUI7QUFBQSxJQUM3QixDQUFDO0FBQUEsRUFDSDtBQUFBLEVBQ0EsT0FBTztBQUFBLElBQ0wsS0FBSztBQUFBLE1BQ0gsT0FBTyxRQUFRLE9BQU8scUJBQXFCO0FBQUEsTUFDM0MsTUFBTTtBQUFBLE1BQ04sU0FBUyxDQUFDLE1BQU0sS0FBSztBQUFBLE1BQ3JCLFVBQVUsQ0FBQyxXQUFXLHFCQUFxQixNQUFNO0FBQUEsSUFDbkQ7QUFBQSxJQUNBLGVBQWU7QUFBQSxNQUNiLFVBQVUsQ0FBQyxHQUFHLE9BQU8sS0FBaUIsZ0JBQWdCLENBQUM7QUFBQSxJQUN6RDtBQUFBLEVBQ0Y7QUFDRixFQUFFOyIsCiAgIm5hbWVzIjogW10KfQo=
